{"version":3,"sources":["App.js","app2.js","serviceWorker.js","index.js"],"names":["App","state","title","newTodo","todos","done","event","console","log","target","value","this","setState","preventDefault","concat","Object","toConsumableArray","_this2","react_default","a","createElement","onSubmit","formsubmite","bind","onChange","onchangeInput","type","placeholder","map","oncheck","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA+DeA,oNA3DbC,MAAQ,CACNC,MAAO,GACPC,QAAS,IACTC,MAAO,CACL,CAAEF,MAAO,cAAeG,MAAM,GAC9B,CAAEH,MAAO,YAAaG,MAAM,kFAIlBC,GACZC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBC,KAAKC,SAAS,CACZT,QAASG,EAAMG,OAAOC,4CAIdJ,GACVA,EAAMO,iBAENF,KAAKC,SAAS,CACZT,QAAS,GACTC,MAAK,GAAAU,OAAAC,OAAAC,EAAA,EAAAD,CACAJ,KAAKV,MAAMG,OADX,CAEH,CACEF,MAAOS,KAAKV,MAAME,QAClBE,MAAM,2EAML,IAAAY,EAAAN,KACP,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,QAAMC,SAAUV,KAAKW,YAAYC,KAAKZ,OACpCO,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SACEI,SAAUb,KAAKc,cAAcF,KAAKZ,MAClCe,KAAK,OACLC,YAAY,gBAEdT,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAb,aAEFR,EAAAC,EAAAC,cAAA,UACGT,KAAKV,MAAMG,MAAMwB,IAAI,SAAA1B,GACpB,OACEgB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WAAWF,SAAUP,EAAKY,UACrC3B,EAAMA,kBAlDL4B,cCDCA,YCUCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.115bd114.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    title: \"\",\n    newTodo: \" \",\n    todos: [\n      { title: \"learn react\", done: false },\n      { title: \"learn jsx\", done: false }\n    ]\n  };\n\n  onchangeInput(event) {\n    console.log(event.target.value);\n    this.setState({\n      newTodo: event.target.value\n    });\n  }\n\n  formsubmite(event) {\n    event.preventDefault();\n\n    this.setState({\n      newTodo: \"\",\n      todos: [\n        ...this.state.todos,\n        {\n          title: this.state.newTodo,\n          done: false\n        }\n      ]\n    });\n  }\n  oncheck() {}\n  render() {\n    return (\n      <div>\n        <h1>Todo list</h1>\n        <form onSubmit={this.formsubmite.bind(this)}>\n          <label>new todo</label>\n          <input\n            onChange={this.onchangeInput.bind(this)}\n            type=\"text\"\n            placeholder=\"import todo\"\n          />\n          <button type=\"submit\">Add Todo</button>\n        </form>\n        <ul>\n          {this.state.todos.map(title => {\n            return (\n              <li>\n                <input type=\"checkbox\" onChange={this.oncheck} />\n                {title.title}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\n\r\nclass App2 extends Component {\r\n  state = {\r\n    newTodo: \"\",\r\n    todos: [\r\n      {\r\n        title: \"Learn React\",\r\n        done: true\r\n      },\r\n      {\r\n        title: \"Learn js\",\r\n        done: true\r\n      }\r\n    ]\r\n  };\r\n  changeListener(event) {\r\n    console.log(event.target.value);\r\n    this.setState({\r\n      newTodo: event.target.value\r\n    });\r\n  }\r\n  submitForm(event) {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      todos: [\r\n        ...this.state.todos,\r\n        {\r\n          title: this.state.newTodo,\r\n          done: false\r\n        }\r\n      ]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Todo List</h1>\r\n        <form onSubmit={this.submitForm.bind(this)}>\r\n          <label>import your todo</label>\r\n          <br />\r\n          <input className=\"text\" onChange={this.changeListener.bind(this)} />\r\n          <button type=\"submit\"> Add Todo</button>\r\n        </form>\r\n        <ul>\r\n          {\" \"}\r\n          {this.state.todos.map(title => {\r\n            return <li> {title.title}</li>;\r\n          })}\r\n        </ul>\r\n        <p>{this.state.newTodo}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App2;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport App2 from \"./app2\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}