{"version":3,"sources":["component/Navbar.js","component/FormInput.js","component/TodosItem.js","App.js","app2.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","FormInput","props","onSubmit","formsubmite","onChange","onchangeInput","type","placeholder","value","newTodo","name","TodosItem","todos","map","title","index","done","event","Removetodo","changeCheked","checked","App","state","console","log","target","this","setState","preventDefault","concat","Object","toConsumableArray","objectSpread","splice","todo","_this2","component_Navbar","component_FormInput","bind","onClick","AllDone","component_TodosItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QASeA,SAPA,WACb,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,0BCcSE,EAjBG,SAAAC,GAChB,OACEL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOG,SAAUD,EAAME,aACrCP,EAAAC,EAAAC,cAAA,SACEC,UAAU,WACVK,SAAUH,EAAMI,cAChBC,KAAK,OACLC,YAAY,cACZC,MAAOP,EAAMQ,QACbC,KAAK,YAEPd,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYO,KAAK,UAAnC,cCcSK,EAzBG,SAAAV,GAChB,OACEL,EAAAC,EAAAC,cAAA,UACGG,EAAMW,MAAMC,IAAI,SAACC,EAAOC,GACvB,OACEnB,EAAAC,EAAAC,cAAA,MAAIC,UAAWe,EAAME,KAAO,eAAiB,UAC3CpB,EAAAC,EAAAC,cAAA,QACEI,SAAU,SAAAe,GAAK,OAAIhB,EAAMiB,WAAWD,EAAOF,KAE3CnB,EAAAC,EAAAC,cAAA,SACEQ,KAAK,WACLF,SAAU,SAAAa,GAAK,OAAIhB,EAAMkB,aAAaF,EAAOF,IAC7CK,QAASN,EAAME,OAEhBF,EAAMA,MACPlB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeO,KAAK,UAAtC,gBC6ECe,6MAvFbC,MAAQ,CACNR,MAAO,GACPL,QAAS,IACTG,MAAO,CACL,CAAEE,MAAO,cAAeE,MAAM,GAC9B,CAAEF,MAAO,YAAaE,MAAM,kFAIlBC,GACZM,QAAQC,IAAIP,EAAMQ,OAAOjB,OACzBkB,KAAKC,SAAS,CACZlB,QAASQ,EAAMQ,OAAOjB,4CAIdS,GACVA,EAAMW,iBAENF,KAAKC,SAAS,CACZlB,QAAS,GACTG,MAAK,GAAAiB,OAAAC,OAAAC,EAAA,EAAAD,CACAJ,KAAKJ,MAAMV,OADX,CAEH,CACEE,MAAOY,KAAKJ,MAAMb,QAClBO,MAAM,4CAKDC,EAAOF,GAClBQ,QAAQC,IAAIP,EAAMQ,OAAOL,SACzB,IAAMR,EAAKkB,OAAAC,EAAA,EAAAD,CAAOJ,KAAKJ,MAAMV,OAC7BA,EAAMG,GAANe,OAAAE,EAAA,EAAAF,CAAA,GAAoBlB,EAAMG,IAC1BH,EAAMG,GAAOC,KAAOC,EAAMQ,OAAOL,QACjCM,KAAKC,SAAS,CACZf,6CAGOK,EAAOF,GAChBE,EAAMW,iBAEN,IAAMhB,EAAQc,KAAKJ,MAAMV,MACzBA,EAAMqB,OAAOlB,EAAO,GACpBW,KAAKC,SAAS,CACZf,4CAIF,IAAMA,EAAQc,KAAKJ,MAAMV,MAAMC,IAAI,SAAAqB,GACjC,MAAO,CACLpB,MAAOoB,EAAKpB,MACZE,MAAM,KAGVU,KAAKC,SAAS,CACZf,2CAGK,IAAAuB,EAAAT,KACP,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,CACEhC,cAAeqB,KAAKrB,cAAciC,KAAKZ,MACvCvB,YAAauB,KAAKvB,YAAYmC,KAAKZ,MACnCjB,QAASiB,KAAKjB,UAEhBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,UACVO,KAAK,SACLiC,QAAS,kBAAMJ,EAAKK,YAHtB,YAOA5C,EAAAC,EAAAC,cAAC2C,EAAD,CACE7B,MAAOc,KAAKJ,MAAMV,MAClBM,WAAYQ,KAAKR,WAAWoB,KAAKZ,MACjCP,aAAcO,KAAKP,aAAamB,KAAKZ,iBAhF/BgB,aCJCA,YCUCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c3ec225b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <header className=\"navbar\">\r\n      <h1>Todo List</h1>\r\n    </header>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nconst FormInput = props => {\r\n  return (\r\n    <form className=\"form\" onSubmit={props.formsubmite}>\r\n      <input\r\n        className=\"inputbox\"\r\n        onChange={props.onchangeInput}\r\n        type=\"text\"\r\n        placeholder=\"import todo\"\r\n        value={props.newTodo}\r\n        name=\"newTodo\"\r\n      />\r\n      <button className=\"addButtom\" type=\"submit\">\r\n        Add Todo\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\nexport default FormInput;\r\n","import React, { Component } from \"react\";\r\n\r\nconst TodosItem = props => {\r\n  return (\r\n    <ol>\r\n      {props.todos.map((title, index) => {\r\n        return (\r\n          <li className={title.done ? \"ListUIRemove\" : \"listUI\"}>\r\n            <form\r\n              onSubmit={event => props.Removetodo(event, index)}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                onChange={event => props.changeCheked(event, index)}\r\n                checked={title.done}\r\n              />\r\n              {title.title}\r\n              <button className=\"removeButton\" type=\"submit\">\r\n                Remove\r\n              </button>\r\n            </form>\r\n          </li>\r\n        );\r\n      })}\r\n    </ol>\r\n  );\r\n};\r\nexport default TodosItem;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./component/Navbar\";\nimport FormInput from \"./component/FormInput\";\nimport TodosItem from \"./component/TodosItem\";\n\nclass App extends Component {\n  state = {\n    title: \"\",\n    newTodo: \" \",\n    todos: [\n      { title: \"learn react\", done: false },\n      { title: \"learn jsx\", done: false }\n    ]\n  };\n\n  onchangeInput(event) {\n    console.log(event.target.value);\n    this.setState({\n      newTodo: event.target.value\n    });\n  }\n\n  formsubmite(event) {\n    event.preventDefault();\n\n    this.setState({\n      newTodo: \"\",\n      todos: [\n        ...this.state.todos,\n        {\n          title: this.state.newTodo,\n          done: false\n        }\n      ]\n    });\n  }\n  changeCheked(event, index) {\n    console.log(event.target.checked);\n    const todos = [...this.state.todos];\n    todos[index] = { ...todos[index] };\n    todos[index].done = event.target.checked;\n    this.setState({\n      todos\n    });\n  }\n  Removetodo(event, index) {\n    event.preventDefault();\n\n    const todos = this.state.todos;\n    todos.splice(index, 1);\n    this.setState({\n      todos\n    });\n  }\n  AllDone() {\n    const todos = this.state.todos.map(todo => {\n      return {\n        title: todo.title,\n        done: true\n      };\n    });\n    this.setState({\n      todos\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <FormInput\n          onchangeInput={this.onchangeInput.bind(this)}\n          formsubmite={this.formsubmite.bind(this)}\n          newTodo={this.newTodo}\n        />\n        <div className=\"div\">\n          <button\n            className=\"allDone\"\n            type=\"submit\"\n            onClick={() => this.AllDone()}\n          >\n            All Done\n          </button>\n          <TodosItem\n            todos={this.state.todos}\n            Removetodo={this.Removetodo.bind(this)}\n            changeCheked={this.changeCheked.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\n\r\nclass App2 extends Component {\r\n  state = {\r\n    newTodo: \"\",\r\n    todos: [\r\n      {\r\n        title: \"Learn React\",\r\n        done: false\r\n      },\r\n      {\r\n        title: \"Learn js\",\r\n        done: false\r\n      }\r\n    ]\r\n  };\r\n  changeListener(event) {\r\n    console.log(event.target.value);\r\n    this.setState({\r\n      newTodo: event.target.value\r\n    });\r\n  }\r\n  submitForm(event) {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      newTodo: \"\",\r\n      todos: [\r\n        ...this.state.todos,\r\n        {\r\n          title: this.state.newTodo,\r\n          done: false\r\n        }\r\n      ]\r\n    });\r\n  }\r\n  changeChecked(event, index) {\r\n    console.log(event.target.checked);\r\n    const todos = [...this.state.todos];\r\n    todos[index] = { ...todos[index] };\r\n    todos[index].done = event.target.checked;\r\n    this.setState({\r\n      todos\r\n    });\r\n  }\r\n  RemoveItem(event, index) {\r\n    console.log(this.state.todos[index]);\r\n    const todos = this.state.todos;\r\n    todos.splice(index, 1);\r\n    this.setState({ todos });\r\n  }\r\n\r\n  AllDone() {\r\n    const todos = this.state.todos.map(todo => {\r\n      return {\r\n        title: todo.title,\r\n        done: true\r\n      };\r\n    });\r\n    this.setState({\r\n      todos\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Todo List</h1>\r\n        <form onSubmit={this.submitForm.bind(this)}>\r\n          <label>import your todo</label>\r\n          <br />\r\n          <input className=\"text\" onChange={this.changeListener.bind(this)} />\r\n          <button type=\"submit\"> Add Todo</button>\r\n        </form>\r\n        <button type=\"submit\" onClick={this.AllDone.bind(this)}>\r\n          All Done\r\n        </button>\r\n        <ul>\r\n          {this.state.todos.map((title, index) => {\r\n            return (\r\n              <li className={title.done ? \"done\" : \"\"}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  onChange={event => this.changeChecked(event, index)}\r\n                  checked={title.done}\r\n                />\r\n                {title.title}\r\n                <button\r\n                  type=\"submit\"\r\n                  onClick={event => this.RemoveItem(event, index)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n        <p>{this.state.newTodo}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App2;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport App2 from \"./app2\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}